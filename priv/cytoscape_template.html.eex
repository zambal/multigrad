<!DOCTYPE html>
<html>
  <head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.24.0/cytoscape.min.js"></script>
  </head>

  <body><div id="cy" style="width: 100%; height: 100vh;"></div></body>

  <script>
    const getTextWidth = (text, font) => {
      // re-use canvas object for better performance
      const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
      const context = canvas.getContext("2d");
      context.font = font;
      const metrics = context.measureText(text);
      return metrics.width;
    }

    const getCssStyle = (element, prop) => {
      return window.getComputedStyle(element, null).getPropertyValue(prop);
    }

    const getCanvasFont = (el = document.body) => {
      const fontWeight = getCssStyle(el, 'font-weight') || 'normal';
      const fontSize = getCssStyle(el, 'font-size') || '16px';
      const fontFamily = getCssStyle(el, 'font-family') || 'Times New Roman';

      return `${fontWeight} ${fontSize} ${fontFamily}`;
    }

    var cy = cytoscape({
      container: document.getElementById('cy'),

      elements: <%= elements %>,

      style: [
        {
          selector: 'node',
          style: {
            "shape": "round-rectangle",
            'background-color': '#eee',
            'border-width': '2px',
            'border-color': '#111',
            'label': 'data(label)',
            "text-valign": "center",
            "text-halign": "center",
            "width": el => {
              const f = getCanvasFont()
              const w = getTextWidth(el.data().label, f)
              console.log(el.data().label)
              console.log(w)
              return w
            },
            "height": "40%"
          }
        },

        {
          selector: 'edge',
          style: {
            'width': 3,
            'line-color': '#ccc',
            'source-arrow-color': '#ccc',
            'source-arrow-shape': 'triangle',
            'target-arrow-color': '#ccc',
            'target-arrow-shape': 'none',
            'curve-style': 'bezier'
          }
        }
      ],

      layout: {
        name: 'breadthfirst',
        fit: true,
        spacingFactor: 1.5,
        nodeDimensionsIncludeLabels: true,
        directed: true,
        circle: false,
        grid: true
      }
    });
  </script>
</html>
