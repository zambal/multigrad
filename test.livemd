# Multigrad

```elixir
Mix.install([
  {:multigrad, path: "."},
  {:kino, "~> 0.7.0"}
])
```

## Section

```elixir
model =
  Axon.input("xs", shape: {nil, 3})
  |> Axon.dense(4)
  |> Axon.relu()
  |> Axon.dense(4)
  |> Axon.relu()
  |> Axon.dense(1)
```

```elixir
Axon.Display.as_graph(model, Nx.template({4, 3}, :f32))
```

```elixir
{init_fn, predict_fn} = Axon.build(model)
```

```elixir
init_fn.(Nx.template({1, 3}, :f32), %{"dense_0" => %{"bias" => Nx.tensor([0.1, 0.2, 0.3, 0.4])}})
```

```elixir
t1 = Nx.iota({3, 4})
t2 = Nx.tensor([[1, 2, 3], [2, 3, 4]])
t3 = Nx.tensor([[1, 2], [2, 3], [3, 4]])
t4 = Nx.iota({4, 3})

{t1, t2, t3, t4}
```

```elixir
{1 * 0 + 2 * 4 + 3 * 8, 1 * 1 + 2 * 5 + 3 * 9}

/
```

```elixir
Nx.dot(t2, [Nx.rank(t2) - 1], t1, [0])
```

```elixir
Nx.dot(t2, [Nx.rank(t2) - 1], t4, [1])
```

```elixir
Nx.transpose(t4)
```
